Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук


Кафедра програмної інженерії


КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для ідентифікації особистості в навчальних закладах

	Студент гр. ПЗПІ-21-10		_________________ Ханьжин М.А.
							(підпис)
	Керівник роботи			_________________ доц. Лещинська І.О.
							(підпис)
							   Роботу захищено «__» ______ 2024.р
							   з оцінкою _______________________
Комісія:				_______________ доц. Лещинський В.О.
								(підпис)
						_______________ доц. Лещинська І.О.
								(підпис)
						_______________ ст. викл. Сокорчук І.П.
								(підпис)
Харків
2024 р.
Аркуш завдання до лабораторних робіт
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук	   Кафедра програмної інженерії		
Спеціальність 121 – Інженерія програмного забезпечення				
Курс 		3	 Семестр 				6					
Навчальна дисципліна  Архітектура програмного забезпечення      		                 
ЗАВДАННЯ
НА ЛАБАРАТОРНІ РОБОТИ СТУДЕНТОВІ
				Ханьжина Микити Андрійовича				
1. Тема проекту: 	«Програмна система для ідентифікації особистості в навчальних закладах»									
2. Термін узгодження завдання курсової роботи « 01»__    квітня        2024 р.
3. Термін здачі студентом закінченої роботи «20»    червня                 2024 р.
4. Вихідні дані до проекту: Програмна система для ідентифікації особистості в навчальних закладах, яка забезпечує контроль доступу до приміщень та відстеження присутності учнів. Система включає авторизацію та ідентифікацію користувачів за допомогою NFC технології, контроль доступу на основі ідентифікаційних даних, фіксацію часу приходу та виходу, а також особисті кабінети для перегляду історії відвідувань та інших персоналізованих даних. Використовувати ОС Windows 10, СКБД Microsoft SQL Server, середовище розробки Microsoft Visual Studio та PyCharm					
5.Зміст пояснювальної записки (перелік питань, що належить розробити) 
вступ, аналіз предметної області, постановка задачі, проектування програмного проєкту, структуру бази даних, кодування програмного проєкту, опис розробленої програмної системи, висновки, перелік посилань, додатки.	
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси) UML діаграми розгортання, взаємодії, станів, прецедентів, діяльності, а також ER модель даних, інтерфейс веб – застосунку, інтерфейс мобільного застосунку, будова IoT пристрою 						
КАЛЕНДАРНИЙ ПЛАН


№	Основні етапи виконання проекту в рамках лабораторних робіт	Терміни виконання етапів	Примітка
1	Написання Vision and Scope документу	13.04.2024	Виконано
2	Написання серверної / back-end частини	20.05.2024	Виконано
3	Розробка програмного забезпечення для IoT або SmartDevice пристрою 	24.05.2024	
4	Написання клієнтської / front-end частини	12.06.2024	Виконано
5	Розробка мобільного застосунку 	16.06.24	

	Дата видачі теми проекту «01	»  	квітня	 	2024 р.
	Керівник                                            			  доц. Лещинська І.О.
							    (підпис)

	Завдання прийняв до виконання
	ст. гр. ПЗПІ-21-10                              			            	Ханьжин М.А
						               (підпис)








РЕФЕРАТ


Пояснювальна записка до курсової роботи: 53 сторінок, 53 рисунків, 7 джерел.
ТЕХНОЛОГІЇ, АРХІТЕКТУРА, НАВЧАННЯ, ІДЕНТИФІКАЦІЯ, КОНТРОЛЬ ДОСТУПУ, ПРОГРАМНА СИСТЕМА, ВІДСТЕЖЕННЯ ПРИСУТНОСТІ, NFC, MICROSOFT SQL SERVER, ASP.NET CORE, REACT, VISUAL STUDIO, PYCHARM.
Об’єкт дослідження: система для забезпечення безпеки та контролю доступу в навчальних закладах, яка використовує технології NFC для ідентифікації студентів або учнів.
Мета курсового проекту: розробити програмну систему, яка спрощує процеси ідентифікації, контролю доступу та оцінювання в навчальних закладах, підвищуючи рівень безпеки, ефективності управління відвідуваністю та моніторингу успішності. Ця система дозволяє автоматизувати процеси авторизації, фіксації присутності та оцінювання, забезпечуючи зручний доступ до персоналізованих даних через особисті кабінети користувачів. 
Методологія розробки: Проект реалізовано з використанням Visual Studio для серверної частини та PyCharm для фронтенд-розробки. Серверна частина створена на базі ASP.NET Core з використанням мови програмування C#, що забезпечує високу продуктивність та безпеку. Клієнтська частина розроблена на основі бібліотеки React, Node JS та Express, яка дозволяє створювати інтерактивні та динамічні веб-додатки на JavaScript. Управління даними здійснюється за допомогою реляційної СУБД Microsoft SQL Server. 
Результати розробки: В результаті роботи була створена програмна система, яка дозволяє ефективно управляти доступом до приміщень навчальних закладів, відстежувати присутність учнів, а також забезпечувати прозоре оцінювання. Система забезпечує високий рівень безпеки та зручності, використовуючи сучасні технології та методи розробки.
ЗМІСТ


Вступ	7
1 Специфікація програми	8
1.1	Основні функції програми	8
1.2	Огляд функцій веб-додатку для учня	10
1.2.1	Авторизація	10
1.2.2	Перегляд та редагування особистого кабінету	11
1.2.3	Перегляд відвідувань та статистики відвідувань	12
1.2.4	Перегляд оцінок	13
1.2.5	Отримання річної оцінки	13
1.2.6	Перегляд розкладу канікул	14
1.2.7	Перегляд однокласників	15
1.3	Огляд функцій веб-додатку для вчителя	15
1.3.1	Авторизація	15
1.3.2	Перегляд та редагування особистого кабінету	16
1.3.3	Перегляд, створення та редагування облікових записів учнів	17
1.3.4	Перегляд, редагування та виставлення оцінок учням	19
1.3.5	Перегляд розкладу канікул	21
1.3.6	Отримання річної оцінки учня	21
1.3.7	Перегляд відвідувань та статистики відвідувань учня	22
1.4	Огляд функцій веб-додатку для вчителя	23
1.4.1	Авторизація	23
1.4.2	Перегляд, редагування та створення облікових записів вчителів	24
1.4.3	Перегляд, редагування та створення облікових записів учнів	26
1.4.4	Перегляд, редагування та створення класів	26
1.4.5	Перегляд, редагування та створення предметів	27
1.4.6	Перегляд, редагування та створення розкладу канікул	29
1.4.7	Перегляд, редагування та створення оцінок	30
1.4.8	Перегляд та редагування відвідувань	31
2	Проектування програми	33
2.1	Архітектура серверної частини	33
2.2	Архітектура клієнтської частини	39
Висновки	46
Перелік джерел посилання	47
Додаток А	48
Додаток Б	50
Додаток В	53























ВСТУП


Метою моєї курсової роботи є створення програмної системи для ідентифікації особистості. Для виконання цієї задачі були реалізовані наступні функції:
–	Авторизація користувачів;
–	Ідентифікація за допомогою NFC;
–	Контроль доступу;
–	Особисті кабінети;
–	Перегляд та виставлення оцінок;
–	Аналіз та статистика відвідувань;
Програма була розроблена з використанням мов програмування C# для серверної частини та JavaScript для фронтенд-частини. Розробка здійснювалася у середовищах Visual Studio та PyCharm. Використані технології включають ASP.NET Core [1] для серверної частини, React [2], Node JS та Express [3] для клієнтської частини, та Microsoft SQL Server [4] для зберігання даних.
Програмна система забезпечує надійну та зручну ідентифікацію особистості, контроль доступу до приміщень та відстеження відвідуваності та успішності студентів навчальних закладів. Вона сприяє підвищенню рівня безпеки та ефективності управління навчальним процесом.










1 СПЕЦИФІКАЦІЯ ПРОГРАМИ
1.1	Основні функції програми


Завдяки програмній системі можна забезпечити контроль доступу до приміщень, відстеження присутності учнів, а також перегляд оцінок та успішності учнів. Система включає особисті кабінети для учнів та вчителів, де вони можуть переглядати статистики відвідувань та оцінок. 
Щоб забезпечити цю функціональність, моя система реалізує наступні можливості:
Для учня:
–	Авторизація;
–	Перегляд та редагування особистого кабінету;
–	Перегляд оцінок;
–	Отримання річної оцінки;
–	Перегляд історії та статистики відвідувань;
–	Перегляд розкладу канікул;
–	Перегляд однокласників;
–	Відмічати відвідуваність у школі.
Для вчителя:
–	Авторизація;
–	Перегляд, реєстрація та редагування облікових записів учнів;
–	Перегляд та редагування особистого кабінету;
–	Перегляд та виставлення оцінок учням;
–	Перегляд історії відвідувань учнів;
–	Отримання річної оцінки та статистики відвідувань учня.
Для адміністратора:
–	Авторизація;
–	Реєстрація та редагування облікових записів учнів та вчителів;
–	Перегляд та редагування класів;
–	Перегляд та редагування предметів;
–	Перегляд та редагування розкладів канікул; 
–	Перегляд та редагування відвідувань; 
–	Перегляд та редагування оцінок.

Спершу потрібно зрозуміти, як користувач працює з додатком. Для цього створено діаграму прецедентів (див. рис. 1.1), яка допомагає визначити способи взаємодії користувача з програмою та дії, які він виконує.
 
Рисунок 1.1 – UML діаграма прецедентів для системи

У системі може існувати 3 види користувачів:
•	Учень, який може авторизуватися в системі, переглядати та редагувати особистий кабінет, переглядати оцінки, відмічати та переглядати свою відвідуваність, отримувати річну оцінку та статистику відвідувань;
•	Вчитель, який може авторизуватися в системі, переглядати та редагувати особистий кабінет, переглядати та виставляти оцінки учнів, переглядати відвідуваність учнів, реєструвати нових учнів, отримувати річну оцінку та статистику відвідувань учня;
•	Адміністратор загалом стежить за сервісом, може авторизуватися в системі, реєструвати нових учнів та вчителів, переглядати та редагувати усі дані про учнів, вчителів, оцінки, класи, розклад канікул, предметів, відміток учнів.


1.2	Огляд функцій веб-додатку для учня
1.2.1	Авторизація


При переході на сайт учень бачить вікно авторизації (див. рис. 1.2), де він може ввести свої облікові дані, та роль учня, для доступу до системи. Після успішної авторизації учень потрапляє на головну сторінку учня.
 
Рисунок 1.2 – Головна сторінка авторизації


1.2.2	Перегляд та редагування особистого кабінету


Після авторизації учень може переглядати свої особисті дані на головній сторінці (див. рис. 1.3) та редагувати їх натиснувши на кнопку «Редагувати дані», такі дані, як електрона пошта, номер телефону та пароль (див. рис. 1.4).
 
Рисунок 1.3 – Головна сторінка учня

 
Рисунок 1.4 – Компонент із редагуванням даних учня





1.2.3	Перегляд відвідувань та статистики відвідувань


	На головній сторінці, учень може переглядати свою історію відвідувань (див. рис. 1.5) натиснувши на кнопку «Переглянути відвідування» та статистику відвідувань за обраний шкільний рік (див. рис. 1.6) натиснувши на кнопку «Переглянути статистику відвідувань».
 
Рисунок 1.5 – Компонент із переглядом відвідувань учня

 
Рисунок 1.6 – Компонент із переглядом статистики відвідувань





1.2.4	Перегляд оцінок


	Учень може переглядати свої оцінки за різні предмети (див. рис. 1.7) натиснувши на кнопку «Переглянути щоденник з оцінками», а потім обрав предмет та клас предмету.
 
Рисунок 1.7 – Компонент із переглядом щоденнику з оцінками


1.2.5	Отримання річної оцінки


	Учень може переглядати свою річну оцінку за обраний предмет, натиснувши на кнопку «Переглянути річну оцінку за предметом», обравши предмет та клас предмета, а також вказав рік та можливістю вказання ваг типів оцінок (див. рис. 1.8).
 
Рисунок 1.8 – Компонент із переглядом річної оцінки


1.2.6	Перегляд розкладу канікул


	Учень може переглядати розклад канікул для своєї школи натиснувши на кнопку «Переглянути розклад канікул» (див. рис. 1.9).
 
Рисунок 1.9 – Компонент із переглядом розкладу канікул

1.2.7	Перегляд однокласників


	Учень може переглядати список своїх однокласників де виводиться список з інформацією про інших учнів що знаходяться з авторизованим учнем в одному класі (див. рис. 1.10).
 
Рисунок 1.10 – Компонент із переглядом списку однокласників учня


1.3	Огляд функцій веб-додатку для вчителя
1.3.1	Авторизація


	При переході на сайт вчитель бачить вікно авторизації (див. рис. 1.2), де він може ввести свої облікові дані та роль вчителя, для доступу до системи. Коли введені правильні дані, відкривається головна сторінка вчителя.



1.3.2	Перегляд та редагування особистого кабінету


Після авторизації вчитель може переглядати свої особисті дані на головній сторінці вчителя (див. рис. 1.11) та редагувати їх натиснувши на кнопку «Редагувати дані», такі дані, як ПІБ, електрона пошта, номер телефону та пароль (див. рис. 1.12).
 
Рисунок 1.11 – Головна сторінка вчителя

 
Рисунок 1.12 – Компонент із редагуванням даних вчителя

1.3.3	Перегляд, створення та редагування облікових записів учнів


	На головній сторінці, вчитель може переглядати (див. рис. 1.13), при натисканні кнопки «Переглянути список учнів», створювати (див. рис. 1.14) облікові записи учнів, при натисканні кнопки «Додати учня», та ввівши необхідні дані, а також може редагувати або видалити їх (див. рис. 1.15), при натисканні кнопки «Оновити дані учня».
 
Рисунок 1.13 – Компонент із переглядом списку учнів

 
Рисунок 1.14 – Компонент із реєстрацією учня

 
Рисунок 1.15 – Компонент із редагуванням даних учня


1.3.4	Перегляд, редагування та виставлення оцінок учням


	Вчитель може переглядати оцінки учнів (див. рис. 1.16), при натисканні на кнопку «Переглянути журнал оцінок», де треба обрати учня, предмет та клас предмету, а також редагувати або видалити оцінки учнів (див. рис. 1.17), при натисканні на кнопку «Оновити оцінки», а також виставляти нові оцінки (див. рис. 1.18), при натисканні на кнопку «Проставити оцінку».
 
Рисунок 1.16 – Компонент із переглядом щоденнику з оцінками учня

 
Рисунок 1.17 – Компонент із редагуванням оцінки

 
Рисунок 1.18 – Компонент із функцією виставлення оцінки



1.3.5	Перегляд розкладу канікул


	Вчитель може переглядати розклад канікул для своєї школи натиснувши на кнопку «Переглянути розклад канікул» (див. рис. 1.9).


1.3.6	Отримання річної оцінки учня


	Вчитель може переглядати річні оцінки учнів (див. рис. 1.19), за обраний предмет, натиснувши на кнопку «Розрахувати річну оцінку», обравши учня, предмет та клас предмета, а також вказав рік та можливістю вказання ваг типів оцінок.
 
Рисунок 1.19 – Компонент із переглядом річної оцінки учня

1.3.7	Перегляд відвідувань та статистики відвідувань учня


	Вчитель може переглядати відвідуваність та статистику відвідувань учня, за обраний шкільний рік (див. рис. 1.20), натиснувши на кнопку «Відвідуваність учня», обравши учня та рік.
 
Рисунок 1.20 – Компонент із переглядом статистики відвідувань учня






1.4	Огляд функцій веб-додатку для вчителя
1.4.1	Авторизація


	При переході на сайт адміністратор бачить вікно авторизації (див. рис. 1.2), де треба ввести правильний логін та пароль та роль вчителя, для доступу до системи. Коли введені правильні дані, відкривається головна сторінка адміністратора (див. рис. 1.21).
 
Рисунок 1.21 – Головна сторінка адміністратора




1.4.2	Перегляд, редагування та створення облікових записів вчителів


	На головній сторінці, адміністратор може переглядати (див. рис. 1.22), створювати (див. рис. 1.23) та редагувати або видалити (див. рис. 1.24) облікові записи вчителів. За ці функції відповідає блок «Вчителі», та кнопки «Переглянути всіх вчителів», «Додати вчителя», «Оновити або видалити вчителя».
 
Рисунок 1.22 – Компонент із списком вчителів

 
Рисунок 1.23 – Компонент із реєстрацією вчителя

 
Рисунок 1.24 – Компонент із редагуванням даних вчителя


1.4.3	Перегляд, редагування та створення облікових записів учнів


	Адміністратор може переглядати (див. рис. 1.13), створювати (див. рис. 1.14) та редагувати або видалити (див. рис. 1.15) облікові записи учнів. За ці функції відповідає блок «Учні», та кнопки «Переглянути всіх учнів», «Додати учня», «Оновити або видалити учня».


1.4.4	Перегляд, редагування та створення класів


	Адміністратор може переглядати (див. рис. 1.25), створювати (див. рис. 1.26) та редагувати або видалити (див. рис. 1.27) класи. За ці функції відповідає блок «Класи», та кнопки «Переглянути всі класи», «Додати клас», «Оновити або видалити клас».
 
Рисунок 1.25 – Компонент із переглядом списку класів

 
Рисунок 1.26 – Компонент із створенням класу

 
Рисунок 1.27 – Компонент із редагуванням класу


1.4.5	Перегляд, редагування та створення предметів


	Адміністратор може переглядати (див. рис. 1.28), створювати (див. рис. 1.29) та редагувати або видалити (див. рис. 1.30) предмети. За ці функції відповідає блок «Предмети», та кнопки «Переглянути всі предмети», «Додати предмет», «Оновити або видалити предмет».
 
Рисунок 1.28 – Компонент із переглядом списку предметів

 
Рисунок 1.29 – Компонент із створенням предмету

 
Рисунок 1.30 – Компонент із редагуванням предмету

1.4.6	Перегляд, редагування та створення розкладу канікул


	Адміністратор може переглядати (див. рис. 1.9), створювати (див. рис. 1.31) та редагувати або видалити (див. рис. 1.32) розклад канікул. За ці функції відповідає блок «Канікули», та кнопки «Переглянути всі канікули», «Додати канікули», «Оновити або видалити канікули».
 
Рисунок 1.31 – Компонент із створенням розкладу канікул

 
Рисунок 1.32 – Компонент із редагуванням розкладу канікул


1.4.7	Перегляд, редагування та створення оцінок


	Адміністратор може переглядати (див. рис. 1.16), виставляти нові оцінки (див. рис. 1.33) та редагувати або видалити (див. рис. 1.34) оцінки. Виставлення оцінки та редагування відрізняються від вчительської тим, що адміністратору треба самому обрати вчителя який виставить оцінку. За ці функції відповідає блок «Оцінки», та кнопки «Переглянути оцінки», «Додати оцінку», «Оновити або видалити оцінку».
 
Рисунок 1.33 – Компонент із функцією виставленням оцінки

 
Рисунок 1.34 – Компонент із редагуванням оцінки учня


1.4.8	Перегляд та редагування відвідувань


	Адміністратор може переглядати (див. рис. 1.35), при обиранні необхідного учня, та редагувати або видалити (див. рис. 1.36) відвідування учня, при натисканні кнопки «Редагувати» випливає меню із функцією редагування. За ці функції відповідає блок «Відвідування», та кнопка «Переглянути та редагувати відвідування учня».
 
Рисунок 1.35 – Компонент із переглядом списку відвідувань учня

 
Рисунок 1.36 –Меню із редагуванням запису відвідування учня

2	ПРОЕКТУВАННЯ ПРОГРАМИ
2.1	Архітектура серверної частини


Серверна система реалізована за допомогою фреймворку ASP.NET Core, використовуючи мову програмування C#. Усі процеси розробки здійснюються в середовищі Visual Studio. Серверна частина включає значну частину бізнес-логіки системи.
База даних створена на платформі Microsoft SQL Server. Вибір цієї СУБД обґрунтований її високою продуктивністю, надійністю і здатністю масштабуватись для обробки великих обсягів даних. Microsoft SQL Server підтримує ACID-властивості, що гарантує надійність транзакцій, а також забезпечує безпечну передачу даних завдяки підтримці SSL. Структура бази даних наведена на Рисунку 2.1.
Серверна частина відповідає за реалізацію бізнес-логіки, яка включає обробку даних відвідувань учнів та розрахунок річної оцінки з урахуванням ваг для кожного предмету. Вона надає REST API інтерфейс, що дозволяє іншим компонентам системи взаємодіяти з додатком. Для документування та тестування API використовується інструмент Swagger [5], який значно полегшує процес розробки та інтеграції різних компонентів. 
Серверна частина була побудована за принципом чистої архітектури [6], яка передбачає розподіл на рівні абстракції. Для цього використовується архітектурний підхід Model-View-Controller (MVC) [7] (див. рис. 2.2), де модель відповідає за роботу з базою даних, а контролери обробляють відповідну частину бізнес-логіки, зберігаючи її роздільність та ізоляцію. Така структура забезпечує модульність та гнучкість системи, а також дозволяє легко підтримувати та розширювати функціональність проекту.
Для взаємодії з базою даних використовується Entity Framework Core, який забезпечує зручний механізм роботи з даними через ORM (Object-Relational Mapping). Це дозволяє як виконувати прямі SQL-запити, так і використовувати високорівневі методи для роботи з даними.
Основною бізнес-логікою проекту є:
•	Отримання статистики відвідувань учня за обраний шкільний рік: Ця функція включає збір та обробку даних про відвідування, розрахунок кількості присутніх та відсутніх днів, а також обчислення відсотка відвідуваності за рік. Система враховує дні навчання, виключаючи вихідні та святкові дні, які також зберігаються у базі даних. Приклад програмного коду у додатку А.
•	Розрахунок річної оцінки учня з урахуванням ваг для кожного предмету: Ця функція обчислює середню оцінку за рік, беручи до уваги вагу різних типів оцінок, таких як практичні роботи, тести, домашні завдання та контрольні роботи. Користувачі можуть вказати ваги для кожного типу оцінок, що дозволяє гнучко налаштовувати систему під різні освітні стандарти. Приклад програмного коду у додатку Б.

Безпека користувачів забезпечується за рахунок хешування паролів (див. рис. 2.3) перед їх зберіганням у базі даних за допомогою бібліотеки BCrypt, а також використанням JWT токенів для авторизації та доступу до захищеної інформації про користувачів.
Головною функцією системи є управління відвідуваністю учнів та обробка річних оцінок. Для цього користувачі повинні пройти процес реєстрації та авторизації. Крім того, система надає можливість отримання статистики відвідувань та розрахунку річної оцінки для кожного учня, що дозволяє більш ефективно керувати навчальним процесом.

 
Рисунок 2.1 – ER-діаграма бази даних

 
Рисунок 2.2 – Архітектура побудована за допомогою MVC

 
Рисунок 2.3 – Демонстрація хешування паролів

Розглянемо, як реалізовано принципи чистої архітектури у моєму сервері. Основна ідея цієї архітектури полягає в розподілі та ізоляції компонентів системи. У моєму проекті це реалізовано через контролери, які відповідають за функціонал, моделі, що забезпечують взаємодію з базою даних, і маршрути, які зв’язують серверну частину з клієнтською частиною додатку.
Розглянемо роботу з учнями у нашому додатку. У контролері для управління учнями реалізовано весь функціонал, пов'язаний з ними. Наприклад, під час авторизації учнів (див. рис. 2.4), контролер отримує дані від клієнта, передає їх до моделей (див. рис. 2.5), які перевіряють ці дані у базі даних. Якщо дані коректні, генерується JWT-токен, що забезпечує безпечний доступ до захищених ресурсів. 
Після успішної авторизації, результати повертаються до контролера, який надсилає їх клієнту. Доступ до авторизації та інших функцій здійснюється через окремі маршрути, що визначені для кожної операції.
Такий підхід використовується й в інших частинах додатку, забезпечуючи ізоляцію компонентів та зручність їх модифікації. Наприклад, створення нового учня, також здійснюється через окремий маршрут і передбачає перевірку прав користувача та унікальності електронної пошти (див. рис. 2.6 – 2.7), а також хешування паролю (див. рис. 2.8).
 
Рисунок 2.4 – Метод для авторизації користувача

 
Рисунок 2.5 – Моделі для перевірки у базі даних

 
Рисунок 2.6 – Метод для створення нового учня

 
Рисунок 2.7 – Моделі для перевірки унікальності електронної пошти

 
Рисунок 2.8 – Хешування паролю у коді


2.2	Архітектура клієнтської частини


Для реалізації клієнтської частини мого проекту використано фреймворк React та бібліотеку Material-UI, а також Node.js і Express для обробки запитів на клієнтському боці. Клієнтська частина побудована на основі модульної архітектури (див. рис. 2.9), що означає поділ системи на незалежні модулі, кожен з яких виконує окрему функцію. Було застосовано метод Component-Based Development, який передбачає створення окремих компонентів (див. рис. 2.10), що можуть повторно використовуватися на різних сторінках. Цей підхід спрощує обслуговування та розуміння системи, а також дозволяє застосовувати принцип заміщення Liskov Substitution Principle (LSP), коли компоненти можна замінювати без порушення роботи додатку.
Розглянемо архітектуру клієнтської частини на прикладі головної сторінки учня. Головна сторінка учня відображає інформацію про учнів, при натисканні на кнопки виводить їхні оцінки та відвідуваність, використовуючи різні компоненти (див. рис. 2.11 – 2.12). Один компонент відповідає за виведення списку учнів, тобто однокласників авторизованого учня (див. рис. 2.13), інший компонент виводить щоденник з оцінками авторизованого учня (див. рис. 2.14 – 2.15). Ці компоненти взаємодіють із серверною частиною, реалізованою на платформі ASP.NET, через модулі для роботи з даними, що отримують і зберігають інформацію, як приклад отримання відфільтрованого списку учнів (див. рис. 2.16 ) та процес оновлення даних авторизованого учня (див. рис. 2.17).
 
Рисунок 2.9 – Клієнтська частина побудована на основі модульної архітектури

 
Рисунок 2.10 – Компоненти проекту

 
Рисунок 2.11 – Головний екран учня, частина з ініціалізацією стану та завантаженням даних користувача

 
Рисунок 2.12 – Головний екран учня, частина із відтворенням основного контенту

 
Рисунок 2.13 – Компонент із списком учнів

 
Рисунок 2.14 – Компонент щоденника з оцінками, частина із ініціалізацією стану та завантаженням даних

 
Рисунок 2.15 – Компонент щоденника з оцінками, частина із відтворенням основного контенту

 
Рисунок 2.16 – Сервіс для підключення до бази даних, частина із фільтрацією списку учнів

 
Рисунок 2.17 – Сервіс для підключення до бази даних, частина із оновленням даних авторизованого учня





















ВИСНОВКИ


У процесі курсової роботи на тему «Програмна система для ідентифікації особистості в навчальних закладах» я створив систему, яка складається з двох основних частин: серверна частина та клієнтська частина. Система забезпечує контроль доступу до приміщень та відстеження присутності учнів за допомогою NFC технології. 
Учні можуть переглядати свої особисті кабінети, в яких відображаються історія відвідувань, оцінки, отримання статистики відвідувань учня та розрахунок річної оцінки учня, та інша персоналізована інформація. Вчителі можуть переглядати свої особисті кабінети, виставляти оцінки та переглядати інформацію про учнів та інша персоналізована інформація. Адміністратори мають можливість створювати та редагувати облікові записи учнів і вчителів, а також керувати усім сервісом.
Результатом роботи стало повноцінне програмне забезпечення. Під час розробки я закріпив свої навички в мовах програмування JavaScript і C#. Для клієнтської частини я використав фреймворк React, а також Node.js з Express для обробки запитів. Серверна частина була реалізована за допомогою ASP.NET. Розробка здійснювалася в середовищах PyCharm та Visual Studio.
Ця програмна система побудована на модульній архітектурі для клієнтської частини і MVC архітектурі для серверної частини, що забезпечує її гнучкість і простоту у масштабуванні та розширенні функціональності. Це дозволить продовжувати розвивати проект та впроваджувати його в різних навчальних закладах, забезпечуючи високу якість і надійність програмного забезпечення.




ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Документація з ASP.NET. URL:  https://learn.microsoft.com/ru-ru/aspnet/core/?view=aspnetcore-6.0 (дата звернення: 22.03.2024).
2.	Документація з React. URL:  https://uk.legacy.reactjs.org/docs/getting-started.html (дата звернення: 30.04.2024).
3.	Brown E. Web Development with Node and Express. 2nd ed. — Sebastopol, CA: O'Reilly Media, 2019. — 346 p.
4.	Посібник з MS SQL Server 2022. URL:  https://metanit.com/sql/sqlserver/ (дата звернення: 22.03.2024).
5.	Документація з Swagger. URL: https://swagger.io/solutions/api-documentation/ (дата звернення: 27.03.2024).
6.	Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.
7.	Документація по патерну MVC. URL:  https://learn.microsoft.com/ru-ru/aspnet/mvc/ (дата звернення: 22.03.2024).













ДОДАТОК А
Програмний код методу для отримання статистики відвідувань
AttendanceController.cs:
1.	// Отримання статистики відвідуванності за шкільний рік
2.	[HttpGet("attendanceStatistics/{studentId}/{startYear}")]
3.	public async Task<IActionResult> GetAttendanceStatistics(int studentId, int startYear)
4.	{
5.	    try
6.	    {
7.	        if (!ModelState.IsValid)
8.	            return BadRequest(ModelState);
9.	
10.	        var statistics = await attendanceRepository.GetAttendanceStatisticsAsync(studentId, startYear);
11.	        return Ok(statistics);
12.	    }
13.	    catch (Exception ex)
14.	    {
15.	        Console.WriteLine($"Error in GetAttendanceStatistics: {ex.Message}");
16.	        return StatusCode(500, "Internal server error");
17.	    }
18.	}

AttendanceRepository.cs:
1.	// Отримання статистики відвідуванності за шкільний рік
2.	public async Task<AttendanceStatisticsDto> GetAttendanceStatisticsAsync(int studentId, int schoolYearStart)
3.	{
4.	    try
5.	    {
6.	        var schoolYearStartDate = new DateTime(schoolYearStart, 9, 1);
7.	        var schoolYearEndDate = new DateTime(schoolYearStart + 1, 5, 31);
8.	
9.	        var holidays = await context.Holidays
10.	            .Where(h => h.StartDate >= schoolYearStartDate && h.EndDate <= schoolYearEndDate)
11.	            .ToListAsync();
12.	
13.	        var attendanceRecords = await context.Attendances
14.	            .Where(a => a.StudentId == studentId && a.CheckInTime >= schoolYearStartDate && a.CheckInTime <= schoolYearEndDate)
15.	            .ToListAsync();
16.	
17.	        var presentDays = attendanceRecords.Count(a => a.Status == "Присутній");
18.	        var absentDays = attendanceRecords.Count(a => a.Status == "Відсутній");
19.	
20.	        var totalSchoolDays = 0;
21.	
22.	        for (var date = schoolYearStartDate; date <= schoolYearEndDate; date = date.AddDays(1))
23.	        {
24.	            if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
25.	                continue;
26.	
27.	            if (holidays.Any(h => h.StartDate <= date && h.EndDate >= date))
28.	                continue;
29.	
30.	            totalSchoolDays++;
31.	        }
32.	
33.	        var attendancePercentage = Math.Round((double)presentDays / totalSchoolDays * 100, 2);
34.	
35.	        var student = await context.Students.FindAsync(studentId);
36.	
37.	        return new AttendanceStatisticsDto
38.	        {
39.	            StudentId = studentId,
40.	            StudentName = $"{student.Surname} {student.Name} {student.Patronymic}",
41.	            TotalDays = totalSchoolDays,
42.	            PresentDays = presentDays,
43.	            AbsentDays = absentDays,
44.	            AttendancePercentage = attendancePercentage
45.	        };
46.	    }
47.	    catch (Exception ex)
48.	    {
49.	        Console.WriteLine($"Error in GetAttendanceStatisticsAsync: {ex.Message}");
50.	        throw;
51.	    }
52.	}







ДОДАТОК Б
Програмний код методу для розрахування річної оцінки
ClassRecordController.cs:
1.	// Отримання річної оцінки за обраний предмет у учня
2.	[HttpGet("annualAverageGrade")]
3.	public async Task<IActionResult> GetAnnualAverageGrade(int studentId, string subjectName, string subjectClass, int year, double weightPR = 1, double weightTR = 1, double weightDR = 1, double weightKR = 1)
4.	{
5.	    try
6.	    {
7.	        if (!ModelState.IsValid)
8.	        {
9.	            return BadRequest(ModelState);
10.	        }
11.	
12.	        var subject = await subjectRepository.GetSubjectByNameAndClassAsync(subjectName, subjectClass);
13.	        if (subject == null)
14.	        {
15.	            return NotFound("Subject not found");
16.	        }
17.	
18.	        var gradeWeights = new Dictionary<string, double>
19.	        {
20.	            { "ПР", weightPR },
21.	            { "ТР", weightTR },
22.	            { "ДР", weightDR },
23.	            { "КР", weightKR }
24.	        };
25.	
26.	        var annualGrade = await classRecordRepository.GetAnnualGradeDetailsAsync(studentId, subject.Id, year, gradeWeights);
27.	
28.	        return Ok(annualGrade);
29.	    }
30.	    catch (Exception ex)
31.	    {
32.	        Console.WriteLine($"Error in GetAnnualAverageGrade: {ex.Message}");
33.	        return StatusCode(500, "Internal server error");
34.	    }
35.	}


ClassRecordRepository.cs:
1.	// Отримання семестрової оцінки з предмета та урахуванням вагів
2.	public async Task<double> GetWeightedAverageGradeAsync(int studentId, int subjectId, DateTime startDate, DateTime endDate, Dictionary<string, double> gradeWeights)
3.	{
4.	    try
5.	    {
6.	        var classRecords = await context.ClassRecords
7.	            .Where(cr => cr.StudentId == studentId && cr.SubjectId == subjectId && cr.GradeDate >= startDate && cr.GradeDate <= endDate)
8.	            .ToListAsync();
9.	
10.	        if (classRecords.Count == 0)
11.	            return 0;
12.	
13.	        double sumWeightedGrades = 0;
14.	        double totalWeights = 0;
15.	
16.	        foreach (var record in classRecords)
17.	        {
18.	            double weight = gradeWeights.ContainsKey(record.GradeType) ? gradeWeights[record.GradeType] : 1;
19.	            sumWeightedGrades += record.Grade * weight;
20.	            totalWeights += weight;
21.	        }
22.	
23.	        return sumWeightedGrades / totalWeights;
24.	    }
25.	    catch (Exception ex)
26.	    {
27.	        Console.WriteLine($"Error in GetWeightedAverageGradeAsync: {ex.Message}");
28.	        throw;
29.	    }
30.	}
31.	
32.	// Отримання річної оцінки за обраний предмет у учня
33.	public async Task<AnnualGradeDto> GetAnnualGradeDetailsAsync(int studentId, int subjectId, int year, Dictionary<string, double> gradeWeights = null)
34.	{
35.	    try
36.	    {
37.	        DateTime firstSemesterStart = new DateTime(year, 9, 1);
38.	        DateTime firstSemesterEnd = new DateTime(year, 12, 31);
39.	        DateTime secondSemesterStart = new DateTime(year + 1, 1, 1);
40.	        DateTime secondSemesterEnd = new DateTime(year + 1, 5, 31);
41.	
42.	        var weights = gradeWeights ?? GetDefaultGradeWeights();
43.	
44.	        double firstSemesterAverage = await GetWeightedAverageGradeAsync(studentId, subjectId, firstSemesterStart, firstSemesterEnd, weights);
45.	        double secondSemesterAverage = await GetWeightedAverageGradeAsync(studentId, subjectId, secondSemesterStart, secondSemesterEnd, weights);
46.	        double annualAverage = Math.Round((firstSemesterAverage + secondSemesterAverage) / 2);
47.	
48.	        return new AnnualGradeDto
49.	        {
50.	            FirstSemesterGrade = firstSemesterAverage,
51.	            SecondSemesterGrade = secondSemesterAverage,
52.	            AnnualGrade = annualAverage
53.	        };
54.	    }
55.	    catch (Exception ex)
56.	    {
57.	        Console.WriteLine($"Error in GetAnnualGradeDetailsAsync: {ex.Message}");
58.	        throw;
59.	    }
60.	}



















ДОДАТОК В
Перевірка на плагіат
 
